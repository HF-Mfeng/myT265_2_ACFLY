// Generated by gencpp from file posInfo/PositionInfo_M.msg
// DO NOT EDIT!


#ifndef POSINFO_MESSAGE_POSITIONINFO_M_H
#define POSINFO_MESSAGE_POSITIONINFO_M_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace posInfo
{
template <class ContainerAllocator>
struct PositionInfo_M_
{
  typedef PositionInfo_M_<ContainerAllocator> Type;

  PositionInfo_M_()
    : ret(0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , px(0.0)
    , py(0.0)
    , pz(0.0)  {
    }
  PositionInfo_M_(const ContainerAllocator& _alloc)
    : ret(0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , px(0.0)
    , py(0.0)
    , pz(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _ret_type;
  _ret_type ret;

   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _vz_type;
  _vz_type vz;

   typedef float _px_type;
  _px_type px;

   typedef float _py_type;
  _py_type py;

   typedef float _pz_type;
  _pz_type pz;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ok)
  #undef ok
#endif
#if defined(_WIN32) && defined(err)
  #undef err
#endif

  enum {
    ok = 1u,
    err = 0u,
  };


  typedef boost::shared_ptr< ::posInfo::PositionInfo_M_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::posInfo::PositionInfo_M_<ContainerAllocator> const> ConstPtr;

}; // struct PositionInfo_M_

typedef ::posInfo::PositionInfo_M_<std::allocator<void> > PositionInfo_M;

typedef boost::shared_ptr< ::posInfo::PositionInfo_M > PositionInfo_MPtr;
typedef boost::shared_ptr< ::posInfo::PositionInfo_M const> PositionInfo_MConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::posInfo::PositionInfo_M_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::posInfo::PositionInfo_M_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::posInfo::PositionInfo_M_<ContainerAllocator1> & lhs, const ::posInfo::PositionInfo_M_<ContainerAllocator2> & rhs)
{
  return lhs.ret == rhs.ret &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz &&
    lhs.px == rhs.px &&
    lhs.py == rhs.py &&
    lhs.pz == rhs.pz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::posInfo::PositionInfo_M_<ContainerAllocator1> & lhs, const ::posInfo::PositionInfo_M_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace posInfo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::posInfo::PositionInfo_M_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::posInfo::PositionInfo_M_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::posInfo::PositionInfo_M_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::posInfo::PositionInfo_M_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::posInfo::PositionInfo_M_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::posInfo::PositionInfo_M_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::posInfo::PositionInfo_M_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4b81b197fe93582c1d4236893d83fff";
  }

  static const char* value(const ::posInfo::PositionInfo_M_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4b81b197fe93582ULL;
  static const uint64_t static_value2 = 0xc1d4236893d83fffULL;
};

template<class ContainerAllocator>
struct DataType< ::posInfo::PositionInfo_M_<ContainerAllocator> >
{
  static const char* value()
  {
    return "posInfo/PositionInfo_M";
  }

  static const char* value(const ::posInfo::PositionInfo_M_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::posInfo::PositionInfo_M_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ret\n"
"float32 vx\n"
"float32 vy\n"
"float32 vz\n"
"float32 px\n"
"float32 py\n"
"float32 pz\n"
"\n"
"uint8 ok = 1\n"
"uint8 err = 0\n"
;
  }

  static const char* value(const ::posInfo::PositionInfo_M_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::posInfo::PositionInfo_M_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ret);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.px);
      stream.next(m.py);
      stream.next(m.pz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionInfo_M_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::posInfo::PositionInfo_M_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::posInfo::PositionInfo_M_<ContainerAllocator>& v)
  {
    s << indent << "ret: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ret);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<float>::stream(s, indent + "  ", v.vz);
    s << indent << "px: ";
    Printer<float>::stream(s, indent + "  ", v.px);
    s << indent << "py: ";
    Printer<float>::stream(s, indent + "  ", v.py);
    s << indent << "pz: ";
    Printer<float>::stream(s, indent + "  ", v.pz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSINFO_MESSAGE_POSITIONINFO_M_H
